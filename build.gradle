apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'signing'

mainClassName = 'com.tools.jdk.basic.StringUtils'
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0.0'
group = 'org.commontools'
description = "A bootstrap Java project with gradle,  Mockito, FEST-Assert 2 and Cobertura"

configurations.all {
    //http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        failOnVersionConflict()
        
        // force certain versions of dependencies (including transitive)
        force 'commons-beanutils:commons-beanutils:1.9.1', 'org.slf4j:slf4j-api:1.7.7','commons-collections:commons-collections:3.2.1', 'commons-logging:commons-logging:1.1.1'

        // cache dynamic versions for 1 minutes
        cacheDynamicVersionsFor 1*60, 'seconds'

        // don't cache changing modules at all
        cacheChangingModulesFor 0, 'seconds'
    }
}



buildscript {
// The "buildscript" configuration section is for gradle itself, Oftentimes the repository section is the same for both,
// If I need maven central for both my buildscript and my project, do I need to declare it twice? Yes, you need to specify it twice then indeed.
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.2.RELEASE")
        classpath 'org.markdownj:markdownj:0.3.0-1.0.2b4'
        classpath (group: 'org.apache.activemq', name: 'activemq-all', version:'5.10.0', changing: true)
    }
}
if (!JavaVersion.current().java7Compatible) {
    throw new IllegalStateException("Must be built with Java 7 or higher")
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.springsource.org/plugins-release" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "http://maven.vaadin.com/vaadin-addons" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases"}
    maven { url "https://oss.sonatype.org/content/repositories/google-releases/" }

 }
jar {
    baseName = 'CommonTools'
    version = '1.0'
}

dependencies {

    compile group: 'org.apache.activemq', name: 'activemq-all', version:'5.10.0', changing: true
    compile group: 'com.sun.jersey', name: 'jersey-client', version:'1.18.1'
    compile group: 'com.sun.jersey.contribs', name: 'jersey-apache-client', version:'1.18.1'
    compile ("joda-time:joda-time:2.2"){force = true}
    compile group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version:'0.6.5'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'commons-validator', name: 'commons-validator', version: '1.5.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
//    compile 'org.apache.commons:commons-lang3:3.5'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.2'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
    compile group: 'dom4j', name: 'dom4j', version:'1.6.1'
    compile group: 'org.springframework', name: 'spring-context', version:'3.2.9.RELEASE'
    compile group: 'com.google.guava', name: 'guava', version: '17.0'
    testCompile group: 'xmlunit', name: 'xmlunit', version: '1.5'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.mockito', name:'mockito-all' , version:'1.9.5'
}

// ensure that test resources (src/test/resources) are added to CLASSPATH;
// see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
// http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath
sourceSets {
    main {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
    test {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
}



task bu_wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}


// below is for Markerdownj
import com.petebevin.markdown.MarkdownProcessor

class MarkdownFilter extends FilterReader {
    MarkdownFilter(Reader input) {
        super(new StringReader(new MarkdownProcessor().markdown(input.text)))
    }
}

task bu_markdown(type: Copy) {
    from 'src/markdown'
    include '*.md'
    into 'build/labs'
    rename { it - '.md' + '.html' }
    filter MarkdownFilter
}

// embeded event buildFinished
gradle.buildFinished { buildResult ->
    println "TBU BUILD FINISHED"
    println "build failure - " + buildResult.failure
}


tasks.addRule('Rule Usage: ping<Hostname>') { String taskName ->
    if(taskName.startsWith('ping')) {
        task(taskName) {
            ext.hostname = taskName - 'ping'
            doLast {
                def url = new URL("http://${ext.hostname}")
                def logString
                try {
                    def pageContent = url.text
                    // Do some regex matching on pageContent
                    logString = "${new Date()}\t${ext.hostname}\tUP\n"
                    ext.up = true
                } catch(UnknownHostException e) {
                    logString = "${new Date()}\t${ext.hostname}\tUNKNOWN HOST\n"
                    ext.up = false
                } catch(ConnectException e) {
                    logString = "${new Date()}\t${ext.hostname}\tDOWN\n"
                    ext.up = false
                }
                file(pingLogDir).mkdirs()
                file("${pingLogDir}/ping.log") << logString
            }
        }
    }
}

// some tasks

task bu_succeed {
    doLast {
        println "hello, world"
    }
}

task bu_fail {
    doLast {
        throw new Exception("Build failed")
    }
}



task bu_cleanTempDir(type: Delete) {
    delete fileTree(dir: "tempDir")
}


ext {
    pingLogDir = "${buildDir}/reachable"
}

