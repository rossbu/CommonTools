apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'signing'

mainClassName = 'com.tools.jdk.basic.StringUtils'
// sourceCompatibility cannot be higher than targetCompatibility, this is a restriction of javac.
sourceCompatibility = 11
targetCompatibility = 11
version = '1.0.0'
group = 'org.commontools'
description = "A bootstrap Java project with gradle,  Mockito, FEST-Assert 2 and Cobertura"

configurations.all {
    //http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        failOnVersionConflict()
        
        // force certain versions of dependencies (including transitive)
        force 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50', 'com.fasterxml.jackson.core:jackson-databind:2.9.9.3','commons-codec:commons-codec:1.11','commons-beanutils:commons-beanutils:1.9.1', 'org.slf4j:slf4j-api:1.7.7','commons-collections:commons-collections:3.2.1', 'commons-logging:commons-logging:1.1.1'
        // cache dynamic versions for 1 minutes
        cacheDynamicVersionsFor 1*60, 'seconds'

        // don't cache changing modules at all
        cacheChangingModulesFor 0, 'seconds'

        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.springframework.boot", module:"spring-boot-starter-logging"
//        exclude module: "logback-classic"
    }
}


// alert: The “buildscript” block only controls dependencies for the buildscript process itself, NOT for the application code
// The "buildscript" configuration section is for gradle itself, Oftentimes the repository section is the same for both,
// If I need maven central for both my buildscript and my project, do I need to declare it twice? Yes, you need to specify it twice then indeed.
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.9.RELEASE")
        classpath 'org.markdownj:markdownj:0.4'
        classpath 'org.jetbrains.kotlin:kotlin-runtime:1.2.71'
    }
}
apply plugin: 'org.springframework.boot'
if (!JavaVersion.current().java7Compatible) {
    throw new IllegalStateException("Must be built with Java 7 or higher")
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.springsource.org/plugins-release" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "http://maven.vaadin.com/vaadin-addons" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases"}
    maven { url "https://oss.sonatype.org/content/repositories/google-releases/" }

 }
jar {
    baseName = 'CommonTools'
    version = '1.0'
}

dependencies {
//    The compile configuration is now deprecated and should be replaced by implementation or api
//    compile with implementation (if you don't need transitivity) or api (if you need transitivity)
//    testCompile with testImplementation
//    debugCompile with debugImplementation
//    androidTestCompile with androidTestImplementation


//    The api configuration should be used to declare dependencies which are exported by the library API,
//    whereas the implementation configuration should be used to declare dependencies which are internal to the component.

    // changing: true
    // By default, Gradle treats a module version (eg “myorg:myproj:1.0”) as unchanging over time, allowing us to cache the module meta-data and artifacts indefinitely. If you have a module version
    // that has content (meta-data or artifacts) that can change over time, you can mark the module as ‘changing’.
    implementation 'org.springframework.boot:spring-boot-starter-parent:2.1.9.RELEASE'
    implementation 'org.springframework.boot:spring-boot-dependencies:2.1.9.RELEASE'
    implementation ('org.springframework.boot:spring-boot:2.1.9.RELEASE') {
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    implementation ('org.springframework.boot:spring-boot-starter-actuator:2.1.9.RELEASE') {
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
    }
    implementation ('org.springframework.boot:spring-boot-starter-web:2.1.9.RELEASE')
    implementation group: 'org.springframework', name: 'spring-context', version:'5.1.10.RELEASE'
//    implementation 'org.springframework.security:spring-security-core:5.1.7.RELEASE'

    implementation 'org.apache.commons:commons-text:1.5'
    implementation platform('io.projectreactor:reactor-bom:Dysprosium-RELEASE')
    implementation 'io.projectreactor:reactor-core'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    implementation (group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

    implementation group: 'com.sun.jersey', name: 'jersey-client', version:'1.18.1'
    implementation group: 'com.sun.jersey.contribs', name: 'jersey-apache-client', version:'1.18.1'
    implementation ("joda-time:joda-time:2.10.1"){force = true}
    implementation group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version:'0.6.5'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.5.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
    implementation group: 'dom4j', name: 'dom4j', version:'1.6.1'
    implementation group: 'com.google.guava', name: 'guava', version: '27.1-jre'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.58'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.11'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'
    implementation group: 'org.json', name: 'json', version: '20190722'
    implementation group: 'io.vavr', name: 'vavr', version: '1.0.0-alpha-3'
    implementation group: 'one.util', name: 'streamex', version: '0.7.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.9.3'
    implementation 'org.projectlombok:lombok:1.16.18'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0-RC3'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation ('com.squareup.okhttp3:okhttp:4.2.2')

    // for java 11 backward compatible
    implementation 'javax.xml.ws:jaxws-api:2.3.1'
    implementation 'com.sun.xml.ws:jaxws-ri:2.3.2'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.gson:gson:2.8.6'

    // encryption & hashing
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.64'
    implementation 'de.mkammerer:argon2-jvm:2.6'
    implementation 'com.lambdaworks:scrypt:1.4.0'
    implementation 'at.favre.lib:hkdf:1.1.0'

    // jwt: auth0
    implementation 'com.auth0:java-jwt:3.9.0'

    // jwt:  okta : jjwt impl
    implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
    runtime 'io.jsonwebtoken:jjwt-impl:0.10.7',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.60',
            'io.jsonwebtoken:jjwt-jackson:0.10.7'

    // jwt : nimbus-jose-jwt : https://github.com/felx/nimbus-jose-jwt
    implementation 'com.nimbusds:nimbus-jose-jwt:8.4'
    implementation 'net.minidev:json-smart:2.3'


    testImplementation group: 'xmlunit', name: 'xmlunit', version: '1.5'
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation group: 'org.mockito', name:'mockito-all' , version:'1.9.5'

}

// ensure that test resources (src/test/resources) are added to CLASSPATH;
// see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
// http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath
sourceSets {
    main {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
    test {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


// wait for 12 and 13 to use below
//tasks.withType(JavaCompile).each {
//    it.options.compilerArgs.add('--enable-preview')
//}

task bu_wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}


// below is for Markerdownj
//import com.petebevin.markdown.MarkdownProcessor
//
//class MarkdownFilter extends FilterReader {
//    MarkdownFilter(Reader input) {
//        super(new StringReader(new MarkdownProcessor().markdown(input.text)))
//    }
//}
//
//task bu_markdown(type: Copy) {
//    from 'src/markdown'
//    include '*.md'
//    into 'build/labs'
//    rename { it - '.md' + '.html' }
//    filter MarkdownFilter
//}

// embeded event buildFinished
gradle.buildFinished { buildResult ->
    println "TBU BUILD FINISHED"
    println "build failure infomration if any - " + buildResult.failure
}


tasks.addRule('Rule Usage: ping<Hostname>') { String taskName ->
    if(taskName.startsWith('ping')) {
        task(taskName) {
            ext.hostname = taskName - 'ping'
            doLast {
                def url = new URL("http://${ext.hostname}")
                def logString
                try {
                    def pageContent = url.text
                    // Do some regex matching on pageContent
                    logString = "${new Date()}\t${ext.hostname}\tUP\n"
                    ext.up = true
                } catch(UnknownHostException e) {
                    logString = "${new Date()}\t${ext.hostname}\tUNKNOWN HOST\n"
                    ext.up = false
                } catch(ConnectException e) {
                    logString = "${new Date()}\t${ext.hostname}\tDOWN\n"
                    ext.up = false
                }
                file(pingLogDir).mkdirs()
                file("${pingLogDir}/ping.log") << logString
            }
        }
    }
}

task bu_fail {
    doLast {
        throw new Exception("Build failed")
    }
}



task bu_cleanTempDir(type: Delete) {
    delete fileTree(dir: "tempDir")
}


ext {
    pingLogDir = "${buildDir}/reachable"
}

